/*
SQLyog Enterprise v12.09 (64 bit)
MySQL - 5.7.18-log : Database - dataway
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`dataway` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `dataway`;

/*Table structure for table `interface_info` */

DROP TABLE IF EXISTS `interface_info`;

CREATE TABLE `interface_info` (
  `api_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `api_method` varchar(12) NOT NULL COMMENT 'HttpMethod：GET、PUT、POST',
  `api_path` varchar(512) NOT NULL COMMENT '拦截路径',
  `api_status` int(2) NOT NULL COMMENT '状态：0草稿，1发布，2有变更，3禁用',
  `api_comment` varchar(255) DEFAULT NULL COMMENT '注释',
  `api_type` varchar(24) NOT NULL COMMENT '脚本类型：SQL、DataQL',
  `api_script` mediumtext NOT NULL COMMENT '查询脚本：xxxxxxx',
  `api_schema` mediumtext COMMENT '接口的请求/响应数据结构',
  `api_sample` mediumtext COMMENT '请求/响应/请求头样本数据',
  `api_option` mediumtext COMMENT '扩展配置信息',
  `api_create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `api_gmt_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`api_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COMMENT='Dataway 中的API';

/*Data for the table `interface_info` */

insert  into `interface_info`(`api_id`,`api_method`,`api_path`,`api_status`,`api_comment`,`api_type`,`api_script`,`api_schema`,`api_sample`,`api_option`,`api_create_time`,`api_gmt_time`) values (1,'POST','/api/users/list',1,'1.返参枚举转换;2拼接sql;3日期函数;4分页查询;5按照条件执行不同sql;6.返回数据结构修改','DataQL','// SQL 执行器切换为分页模式\n// 引用分页标志和日期处理函数\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\n// 获取请求参数（这里可以根据页面参数来动态设置条件）\nvar age2 = ${age}\nif (age2 != undefined) {\n    var ageQuery = \" and age > \" + age2\n}\nelse {\n    var ageQuery = \"\"\n}\nvar nameLike2 = \"%\" + ${userName1} + \"%\";\n// 构造查询条件对象\nvar queryTemplate = {\n    \"ageQuery\": ageQuery,\n    \"nameLike\":nameLike2\n}\n// 声明一个查询sql方法（注意这里的拼接age条件的地方，一定要用$符号，#会报错！）\nvar dataSet = @@sql(queryTemplate) <%\n    select * from user where 1=1 and user_name like #{queryTemplate.nameLike} ${queryTemplate.ageQuery}\n%>\n// 声明一个枚举转换类型\nvar sex_str = (sex) -> {\n    if (sex == 1) {\n        return \'男\';\n    }\n    else {\n        return \'女\';\n    }\n}\n// 创建分页查询对象\nvar pageQuery =  dataSet(queryTemplate);\n// 设置分页信息\nrun pageQuery.setPageInfo({\n    \"pageSize\"    : ${pageSize}, // 页大小\n    \"currentPage\" : ${currentPage}   // 第3页\n});\n// 分页信息域\nvar pageInfo = pageQuery.pageInfo();\n// 分页查询数据域\nvar dataInfo = pageQuery.data();\n// 构造返回数据结构\nreturn {\n    \"totalCount\":pageInfo.totalCount,\n    \"totalPage\":pageInfo.totalPage,\n    \"currentPage\":pageInfo.currentPage,\n    \"data\":dataInfo => [{\"id\",\"user_name\",\"sex\":sex_str(sex),\"age\",\"add_time\":time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")}]\n}','{}','{\"requestBody\":\"{\\n  \\\"userName1\\\": \\\"\\\",\\n  \\\"currentPage\\\": 1,\\n  \\\"pageSize\\\": 3,\\n  \\\"age\\\":4\\n}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\": \\\"@resultStatus\\\",\\n  \\\"msg\\\": \\\"@resultMessage\\\",\\n  \\\"code\\\": \\\"@resultCode\\\",\\n  \\\"lifeCycleTime2\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"data\\\": \\\"@resultData\\\"\\n}\"}','2020-05-26 09:54:12','2020-05-27 14:20:33'),(2,'POST','/api/user/queryByName',1,'过滤结果中的数据（1.加中文；2.枚举转换）','DataQL','// 声明一个 SQL\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 声明一个枚举转换类型\nvar sex_str = (sex) -> {\n    if (sex == 1) {\n        return \'男\';\n    }\n    else {\n        return \'女\';\n    }\n}\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nreturn dataSet(${userName}) => {\'id\',\'user_name\',\'sex\':sex_str(sex)}\n','{}','{\"requestBody\":\"{\\\"userName\\\":\\\"刘坤\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 09:56:00','2020-05-26 17:55:38'),(4,'GET','/api/demos',1,'','DataQL','// a new Query.\nreturn 1111;','{}','{\"requestBody\":\"\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 17:55:05','2020-05-26 17:55:13'),(5,'POST','/api/score/query',1,'多个sql先后查询，使用上个sql的查询结果','DataQL','// 声明一个查询user的sqlsql\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nvar user_id = dataSet(${user_name}).id\n\n// 声明一个查询score的sql\nvar queryScore = @@sql(user_id) <%\n    select * from score where user_id = #{user_id};\n%>\n// 使用上一步查询的结果：user_id变量\nreturn queryScore(user_id)','{}','{\"requestBody\":\"{\\\"user_name\\\":\\\"季学英\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 18:04:19','2020-05-26 18:09:09'),(6,'POST','/api/user/query1',0,'拼接sql','DataQL','// 声明一个 SQL\nvar sort2 = \" order by id desc \"\nvar query1 = \" and user_name=\'\" + ${userName} + \"\'\"\nvar template = {\n        \"sort2\":sort2,\n        \"query1\":query1,\n        \"userName\":${userName}\n    }\nvar dataSet = @@sql(template) <%\n    select * from user where 1=1 ${template.query1}  ${template.sort2};\n%>\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nreturn dataSet(template)\n','{}','{\"requestBody\":\"{\\\"userName\\\":\\\"刘坤\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-27 11:36:34','2020-05-27 11:42:04');

/*Table structure for table `interface_release` */

DROP TABLE IF EXISTS `interface_release`;

CREATE TABLE `interface_release` (
  `pub_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Publish ID',
  `pub_api_id` int(11) NOT NULL COMMENT '所属API ID',
  `pub_method` varchar(12) NOT NULL COMMENT 'HttpMethod：GET、PUT、POST',
  `pub_path` varchar(512) NOT NULL COMMENT '拦截路径',
  `pub_status` int(2) NOT NULL COMMENT '状态：0有效，1无效（可能被下线）',
  `pub_type` varchar(24) NOT NULL COMMENT '脚本类型：SQL、DataQL',
  `pub_script` mediumtext NOT NULL COMMENT '查询脚本：xxxxxxx',
  `pub_script_ori` mediumtext NOT NULL COMMENT '原始查询脚本，仅当类型为SQL时不同',
  `pub_schema` mediumtext COMMENT '接口的请求/响应数据结构',
  `pub_sample` mediumtext COMMENT '请求/响应/请求头样本数据',
  `pub_option` mediumtext COMMENT '扩展配置信息',
  `pub_release_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '发布时间（下线不更新）',
  PRIMARY KEY (`pub_id`),
  KEY `idx_interface_release` (`pub_api_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='Dataway API 发布历史。';

/*Data for the table `interface_release` */

insert  into `interface_release`(`pub_id`,`pub_api_id`,`pub_method`,`pub_path`,`pub_status`,`pub_type`,`pub_script`,`pub_script_ori`,`pub_schema`,`pub_sample`,`pub_option`,`pub_release_time`) values (1,2,'POST','/api/user/queryByName',0,'DataQL','// 声明一个 SQL\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 执行这个 SQL，并返回结果\nreturn dataSet(${userName});','// 声明一个 SQL\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 执行这个 SQL，并返回结果\nreturn dataSet(${userName});','{}','{\"requestBody\":\"{\\\"userName\\\":\\\"刘坤\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 09:59:44'),(2,1,'POST','/api/users/list',0,'DataQL','// 声明一个 SQL\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\nvar age = ${age}\nif (age != undefined) {\n    var queryByAge = @@sql(age) <%\n        select * from user where age > #{age}\n    %>\n    return queryByAge(age)\n}\nelse {\n    // 使用 DataQL 拼接字符串（拼接字符串放在变量定义环节，将变量赋值给函数，函数再用形参拼装sql语句）\n    var nameLike2 = \"%\" + ${userName1} + \"%\";\n    var dataSet = @@sql(userName3, start, pageSize) <%\n        select * from user where user_name like #{userName3}  limit #{start}, #{pageSize};\n    %>\n    // 计算分页的起始数\n    var start = (${currentPage} - 1)*${pageSize}\n    // 执行这个 SQL，并返回结果\n    return dataSet(nameLike2, start, ${pageSize}) => [\n        {\n            \'id\':id,\n            \'userName\':user_name,\n            \'age\':age,\n            \'sex\':sex,\n            \'addTime\':time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")\n        }\n    ]\n}\n// 注意：不要想着通过字符串拼接把sql拼接出来，会报错，还需要深入研究','// 声明一个 SQL\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\nvar age = ${age}\nif (age != undefined) {\n    var queryByAge = @@sql(age) <%\n        select * from user where age > #{age}\n    %>\n    return queryByAge(age)\n}\nelse {\n    // 使用 DataQL 拼接字符串（拼接字符串放在变量定义环节，将变量赋值给函数，函数再用形参拼装sql语句）\n    var nameLike2 = \"%\" + ${userName1} + \"%\";\n    var dataSet = @@sql(userName3, start, pageSize) <%\n        select * from user where user_name like #{userName3}  limit #{start}, #{pageSize};\n    %>\n    // 计算分页的起始数\n    var start = (${currentPage} - 1)*${pageSize}\n    // 执行这个 SQL，并返回结果\n    return dataSet(nameLike2, start, ${pageSize}) => [\n        {\n            \'id\':id,\n            \'userName\':user_name,\n            \'age\':age,\n            \'sex\':sex,\n            \'addTime\':time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")\n        }\n    ]\n}\n// 注意：不要想着通过字符串拼接把sql拼接出来，会报错，还需要深入研究','{}','{\"requestBody\":\"{\\n  \\\"userName1\\\": \\\"\\\",\\n  \\\"currentPage\\\": 2,\\n  \\\"pageSize\\\": 2,\\n  \\\"age\\\": 10\\n}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 16:50:40'),(3,3,'POST','/api/test1',1,'DataQL','return 1','return 1','{}','{\"requestBody\":\"{\\\"message\\\":\\\"Hello DataQL.\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 16:53:41'),(4,3,'POST','/api/test1',1,'DataQL','return 1','return 1','{}','{\"requestBody\":\"\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 17:53:54'),(5,4,'GET','/api/demos',0,'DataQL','// a new Query.\nreturn 1111;','// a new Query.\nreturn 1111;','{}','{\"requestBody\":\"\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 17:55:13'),(6,2,'POST','/api/user/queryByName',0,'DataQL','// 声明一个 SQL\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 声明一个枚举转换类型\nvar sex_str = (sex) -> {\n    if (sex == 1) {\n        return \'男\';\n    }\n    else {\n        return \'女\';\n    }\n}\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nreturn dataSet(${userName}) => {\'id\',\'user_name\',\'sex\':sex_str(sex)}\n','// 声明一个 SQL\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 声明一个枚举转换类型\nvar sex_str = (sex) -> {\n    if (sex == 1) {\n        return \'男\';\n    }\n    else {\n        return \'女\';\n    }\n}\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nreturn dataSet(${userName}) => {\'id\',\'user_name\',\'sex\':sex_str(sex)}\n','{}','{\"requestBody\":\"{\\\"userName\\\":\\\"刘坤\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 17:55:38'),(7,5,'POST','/api/score/query',0,'DataQL','// 声明一个查询user的sqlsql\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nvar user_id = dataSet(${user_name}).id\n\n// 声明一个查询score的sql\nvar queryScore = @@sql(user_id) <%\n    select * from score where user_id = #{user_id};\n%>\n// 使用上一步查询的结果：user_id变量\nreturn queryScore(user_id)','// 声明一个查询user的sqlsql\nvar dataSet = @@sql(user_name) <%\n    select * from user where user_name = #{user_name};\n%>\n// 执行这个 SQL，并返回结果；过滤结果中的数据（1.加中文；2.枚举转换）\nvar user_id = dataSet(${user_name}).id\n\n// 声明一个查询score的sql\nvar queryScore = @@sql(user_id) <%\n    select * from score where user_id = #{user_id};\n%>\n// 使用上一步查询的结果：user_id变量\nreturn queryScore(user_id)','{}','{\"requestBody\":\"{\\\"user_name\\\":\\\"季学英\\\"}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\"      : \\\"@resultStatus\\\",\\n  \\\"message\\\"      : \\\"@resultMessage\\\",\\n  \\\"code\\\"         : \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"value\\\"        : \\\"@resultData\\\"\\n}\"}','2020-05-26 18:09:09'),(8,1,'POST','/api/users/list',0,'DataQL','// SQL 执行器切换为分页模式\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\n// 声明一个 SQL\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\nvar age2 = ${age}\nif (age2 != undefined) {\n    var queryByAge = @@sql(age) <%\n        select * from user where age > #{age}\n    %>\n    return queryByAge(age2)\n}\nelse {\n    // 使用 DataQL 拼接字符串（拼接字符串放在变量定义环节，将变量赋值给函数，函数再用形参拼装sql语句）\n    var nameLike2 = \"%\" + ${userName1} + \"%\";\n    var dataSet = @@sql(userName3) <%\n        select * from user where user_name like #{userName3}\n    %>\n\n    // 创建分页查询对象\n    var pageQuery =  dataSet(nameLike2);\n    // 设置分页信息\n    run pageQuery.setPageInfo({\n        \"pageSize\"    : ${pageSize}, // 页大小\n        \"currentPage\" : ${currentPage}   // 第3页\n    });\n    // 执行分页查询\n    var result = pageQuery.data();\n    return result => [\n        {\n            \'id\':id,\n            \'userName\':user_name,\n            \'age\':age,\n            \'sex\':sex,\n            \'addTime\':time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")\n        }\n    ];\n}\n// 注意：不要想着通过字符串拼接把sql拼接出来，会报错，还需要深入研究。拼上的只能是条件的值，不能是整个条件。','// SQL 执行器切换为分页模式\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\n// 声明一个 SQL\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\nvar age2 = ${age}\nif (age2 != undefined) {\n    var queryByAge = @@sql(age) <%\n        select * from user where age > #{age}\n    %>\n    return queryByAge(age2)\n}\nelse {\n    // 使用 DataQL 拼接字符串（拼接字符串放在变量定义环节，将变量赋值给函数，函数再用形参拼装sql语句）\n    var nameLike2 = \"%\" + ${userName1} + \"%\";\n    var dataSet = @@sql(userName3) <%\n        select * from user where user_name like #{userName3}\n    %>\n\n    // 创建分页查询对象\n    var pageQuery =  dataSet(nameLike2);\n    // 设置分页信息\n    run pageQuery.setPageInfo({\n        \"pageSize\"    : ${pageSize}, // 页大小\n        \"currentPage\" : ${currentPage}   // 第3页\n    });\n    // 执行分页查询\n    var result = pageQuery.data();\n    return result => [\n        {\n            \'id\':id,\n            \'userName\':user_name,\n            \'age\':age,\n            \'sex\':sex,\n            \'addTime\':time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")\n        }\n    ];\n}\n// 注意：不要想着通过字符串拼接把sql拼接出来，会报错，还需要深入研究。拼上的只能是条件的值，不能是整个条件。','{}','{\"requestBody\":\"{\\n  \\\"userName1\\\": \\\"\\\",\\n  \\\"currentPage\\\": 2,\\n  \\\"pageSize\\\": 3\\n}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\": \\\"@resultStatus\\\",\\n  \\\"msg\\\": \\\"@resultMessage\\\",\\n  \\\"code\\\": \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"data\\\": \\\"@resultData\\\"\\n}\"}','2020-05-27 09:36:15'),(9,1,'POST','/api/users/list',0,'DataQL','// SQL 执行器切换为分页模式\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\n// 声明一个 SQL\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\nvar age2 = ${age}\nif (age2 != undefined) {\n    var queryByAge = @@sql(age) <%\n        select * from user where age > #{age}\n    %>\n    return queryByAge(age2)\n}\nelse {\n    // 使用 DataQL 拼接字符串（拼接字符串放在变量定义环节，将变量赋值给函数，函数再用形参拼装sql语句）\n    var nameLike2 = \"%\" + ${userName1} + \"%\";\n    var dataSet = @@sql(userName3) <%\n        select * from user where user_name like #{userName3}\n    %>\n\n    // 创建分页查询对象\n    var pageQuery =  dataSet(nameLike2);\n    // 设置分页信息\n    run pageQuery.setPageInfo({\n        \"pageSize\"    : ${pageSize}, // 页大小\n        \"currentPage\" : ${currentPage}   // 第3页\n    });\n    var pageInfo = pageQuery.pageInfo();\n    // 执行分页查询\n    var dataInfo = pageQuery.data();\n    return {\n        \"totalCount\":pageInfo.totalCount,\n        \"totalPage\":pageInfo.totalPage,\n        \"currentPage\":pageInfo.currentPage,\n        \"data\":dataInfo\n    }\n}\n// 注意：不要想着通过字符串拼接把sql拼接出来，会报错，还需要深入研究。拼上的只能是条件的值，不能是整个条件。','// SQL 执行器切换为分页模式\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\n// 声明一个 SQL\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\nvar age2 = ${age}\nif (age2 != undefined) {\n    var queryByAge = @@sql(age) <%\n        select * from user where age > #{age}\n    %>\n    return queryByAge(age2)\n}\nelse {\n    // 使用 DataQL 拼接字符串（拼接字符串放在变量定义环节，将变量赋值给函数，函数再用形参拼装sql语句）\n    var nameLike2 = \"%\" + ${userName1} + \"%\";\n    var dataSet = @@sql(userName3) <%\n        select * from user where user_name like #{userName3}\n    %>\n\n    // 创建分页查询对象\n    var pageQuery =  dataSet(nameLike2);\n    // 设置分页信息\n    run pageQuery.setPageInfo({\n        \"pageSize\"    : ${pageSize}, // 页大小\n        \"currentPage\" : ${currentPage}   // 第3页\n    });\n    var pageInfo = pageQuery.pageInfo();\n    // 执行分页查询\n    var dataInfo = pageQuery.data();\n    return {\n        \"totalCount\":pageInfo.totalCount,\n        \"totalPage\":pageInfo.totalPage,\n        \"currentPage\":pageInfo.currentPage,\n        \"data\":dataInfo\n    }\n}\n// 注意：不要想着通过字符串拼接把sql拼接出来，会报错，还需要深入研究。拼上的只能是条件的值，不能是整个条件。','{}','{\"requestBody\":\"{\\n  \\\"userName1\\\": \\\"\\\",\\n  \\\"currentPage\\\": 2,\\n  \\\"pageSize\\\": 3\\n}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\": \\\"@resultStatus\\\",\\n  \\\"msg\\\": \\\"@resultMessage\\\",\\n  \\\"code\\\": \\\"@resultCode\\\",\\n  \\\"lifeCycleTime\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"data\\\": \\\"@resultData\\\"\\n}\"}','2020-05-27 13:43:29'),(10,1,'POST','/api/users/list',0,'DataQL','// SQL 执行器切换为分页模式\n// 引用分页标志和日期处理函数\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\n// 获取请求参数（这里可以根据页面参数来动态设置条件）\nvar age2 = ${age}\nif (age2 != undefined) {\n    var ageQuery = \" and age > \" + age2\n}\nelse {\n    var ageQuery = \"\"\n}\nvar nameLike2 = \"%\" + ${userName1} + \"%\";\n// 构造查询条件对象\nvar queryTemplate = {\n    \"ageQuery\": ageQuery,\n    \"nameLike\":nameLike2\n}\n// 声明一个查询sql方法（注意这里的拼接age条件的地方，一定要用$符号，#会报错！）\nvar dataSet = @@sql(queryTemplate) <%\n    select * from user where 1=1 and user_name like #{queryTemplate.nameLike} ${queryTemplate.ageQuery}\n%>\n// 声明一个枚举转换类型\nvar sex_str = (sex) -> {\n    if (sex == 1) {\n        return \'男\';\n    }\n    else {\n        return \'女\';\n    }\n}\n// 创建分页查询对象\nvar pageQuery =  dataSet(queryTemplate);\n// 设置分页信息\nrun pageQuery.setPageInfo({\n    \"pageSize\"    : ${pageSize}, // 页大小\n    \"currentPage\" : ${currentPage}   // 第3页\n});\n// 分页信息域\nvar pageInfo = pageQuery.pageInfo();\n// 分页查询数据域\nvar dataInfo = pageQuery.data();\n// 构造返回数据结构\nreturn {\n    \"totalCount\":pageInfo.totalCount,\n    \"totalPage\":pageInfo.totalPage,\n    \"currentPage\":pageInfo.currentPage,\n    \"data\":dataInfo => [{\"id\",\"user_name\",\"sex\":sex_str(sex),\"age\",\"add_time\":time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")}]\n}','// SQL 执行器切换为分页模式\n// 引用分页标志和日期处理函数\nhint FRAGMENT_SQL_QUERY_BY_PAGE = true\nimport \'net.hasor.dataql.fx.basic.DateTimeUdfSource\' as time;\n// 获取请求参数（这里可以根据页面参数来动态设置条件）\nvar age2 = ${age}\nif (age2 != undefined) {\n    var ageQuery = \" and age > \" + age2\n}\nelse {\n    var ageQuery = \"\"\n}\nvar nameLike2 = \"%\" + ${userName1} + \"%\";\n// 构造查询条件对象\nvar queryTemplate = {\n    \"ageQuery\": ageQuery,\n    \"nameLike\":nameLike2\n}\n// 声明一个查询sql方法（注意这里的拼接age条件的地方，一定要用$符号，#会报错！）\nvar dataSet = @@sql(queryTemplate) <%\n    select * from user where 1=1 and user_name like #{queryTemplate.nameLike} ${queryTemplate.ageQuery}\n%>\n// 声明一个枚举转换类型\nvar sex_str = (sex) -> {\n    if (sex == 1) {\n        return \'男\';\n    }\n    else {\n        return \'女\';\n    }\n}\n// 创建分页查询对象\nvar pageQuery =  dataSet(queryTemplate);\n// 设置分页信息\nrun pageQuery.setPageInfo({\n    \"pageSize\"    : ${pageSize}, // 页大小\n    \"currentPage\" : ${currentPage}   // 第3页\n});\n// 分页信息域\nvar pageInfo = pageQuery.pageInfo();\n// 分页查询数据域\nvar dataInfo = pageQuery.data();\n// 构造返回数据结构\nreturn {\n    \"totalCount\":pageInfo.totalCount,\n    \"totalPage\":pageInfo.totalPage,\n    \"currentPage\":pageInfo.currentPage,\n    \"data\":dataInfo => [{\"id\",\"user_name\",\"sex\":sex_str(sex),\"age\",\"add_time\":time.format(add_time, \"yyyy-MM-dd hh:mm:ss\")}]\n}','{}','{\"requestBody\":\"{\\n  \\\"userName1\\\": \\\"\\\",\\n  \\\"currentPage\\\": 1,\\n  \\\"pageSize\\\": 3,\\n  \\\"age\\\":4\\n}\",\"headerData\":[]}','{\"resultStructure\":true,\"responseFormat\":\"{\\n  \\\"success\\\": \\\"@resultStatus\\\",\\n  \\\"msg\\\": \\\"@resultMessage\\\",\\n  \\\"code\\\": \\\"@resultCode\\\",\\n  \\\"lifeCycleTime2\\\": \\\"@timeLifeCycle\\\",\\n  \\\"executionTime\\\": \\\"@timeExecution\\\",\\n  \\\"data\\\": \\\"@resultData\\\"\\n}\"}','2020-05-27 14:20:33');

/*Table structure for table `score` */

DROP TABLE IF EXISTS `score`;

CREATE TABLE `score` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `clazz` varchar(100) NOT NULL DEFAULT '',
  `score` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;

/*Data for the table `score` */

insert  into `score`(`id`,`user_id`,`clazz`,`score`) values (1,1,'语文',100),(2,1,'数学',98),(3,2,'语文',99);

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_name` varchar(100) NOT NULL,
  `sex` tinyint(2) NOT NULL COMMENT '1男0女',
  `age` int(11) NOT NULL,
  `add_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`user_name`,`sex`,`age`,`add_time`) values (1,'刘坤',1,30,'2020-05-26 09:52:47'),(2,'季学英',0,18,'2020-05-26 09:52:58'),(3,'王烨',1,20,'2020-05-26 09:53:14'),(4,'1',1,1,'2020-05-26 14:46:16'),(5,'2',2,2,'2020-05-26 14:46:18'),(6,'3',3,3,'2020-05-26 14:46:20'),(7,'4',4,4,'2020-05-26 14:46:22'),(8,'5',5,5,'2020-05-26 14:46:24'),(9,'6',6,6,'2020-05-26 14:46:26'),(10,'7',7,7,'2020-05-26 14:46:29'),(11,'8',8,8,'2020-05-26 14:46:32'),(12,'9',9,9,'2020-05-26 14:46:34'),(13,'10',10,10,'2020-05-26 14:46:39'),(14,'11',11,11,'2020-05-26 14:46:43'),(15,'12',12,12,'2020-05-26 14:46:46'),(16,'13',13,13,'2020-05-26 14:46:50'),(17,'14',14,14,'2020-05-26 14:46:56');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
